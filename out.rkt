(allocₖ #hash(((Clo l (if0 (pair? l) (add1 (rec (cdr l))) 0) #hash((Y . Y_0) (rec . rec_1))) . #<set: (((• ℓ_1)) #hash((ℓ . (Pair α_0 α_1)) (ℓ_0 . (● #<set:>)) (ℓ_1 . (● #<set:>))))>)
              ((Clo len (len (• ℓ)) #hash((Y . Y_0))) . #<set: (((Clo l (if0 (pair? l) (add1 (rec (cdr l))) 0) #hash((Y . Y_0) (rec . rec_0)))) #hash())>)
              ((Clo u ((y y) u) #hash((f . f_0) (y . y_1))) . #<set: (((• ℓ_5)) #hash((ℓ . (Pair α_0 α_1)) (ℓ_0 . (● #<set:>)) (ℓ_1 . (Pair α_2 α_3)) (ℓ_2 . (● #<set:>)) (ℓ_3 . (Pair α_4 α_5)) (ℓ_4 . (● #<set:>)) (ℓ_5 . (● #<set:>))))>)
              ((Clo v ((x x) v) #hash((f . f_0) (x . x_0))) . #<set: (((• ℓ_1)) #hash((ℓ . (Pair α_0 α_1)) (ℓ_0 . (● #<set:>)) (ℓ_1 . (● #<set:>))))>)
              ((Clo l (if0 (pair? l) (add1 (rec (cdr l))) 0) #hash((Y . Y_0) (rec . rec_0))) . #<set: (((• ℓ)) #hash((ℓ . (● #<set:>))))>)
              ((Clo l (if0 (pair? l) (add1 (rec (cdr l))) 0) #hash((Y . Y_0) (rec . rec_2))) . #<set: (((• ℓ_3)) #hash((ℓ . (Pair α_0 α_1)) (ℓ_0 . (● #<set:>)) (ℓ_1 . (Pair α_2 α_3)) (ℓ_2 . (● #<set:>)) (ℓ_3 . (● #<set:>))))>)
              ((Clo x (f (λ (v) ((x x) v))) #hash((f . f_0))) . #<set: (((Clo y (f (λ (u) ((y y) u))) #hash((f . f_0)))) #hash())>)
              ((Clo f ((λ (x) (f (λ (v) ((x x) v)))) (λ (y) (f (λ (u) ((y y) u))))) #hash()) . #<set: (((Clo rec (λ (l) (if0 (pair? l) (add1 (rec (cdr l))) 0)) #hash((Y . Y_0)))) #hash())>)
              ((Clo u ((y y) u) #hash((f . f_0) (y . y_0))) . #<set: (((• ℓ_3)) #hash((ℓ . (Pair α_0 α_1)) (ℓ_0 . (● #<set:>)) (ℓ_1 . (Pair α_2 α_3)) (ℓ_2 . (● #<set:>)) (ℓ_3 . (● #<set:>))))>)
              ((Clo y (f (λ (u) ((y y) u))) #hash((f . f_0))) . #<set:
                                                              (((Clo y (f (λ (u) ((y y) u))) #hash((f . f_0))))
                                                               #hash((ℓ . (Pair α_0 α_1))
                                                                     (ℓ_0 . (● #<set:>))
                                                                     (ℓ_1 . (● #<set:>))))
                                                              (((Clo y (f (λ (u) ((y y) u))) #hash((f . f_0))))
                                                               #hash((ℓ . (Pair α_0 α_1))
                                                                     (ℓ_0 . (● #<set:>))
                                                                     (ℓ_1 . (Pair α_2 α_3))
                                                                     (ℓ_2 . (● #<set:>))
                                                                     (ℓ_3 . (● #<set:>))))
                                                              >)
              ((Clo Y ((λ (len) (len (• ℓ))) (Y (λ (rec) (λ (l) (if0 (pair? l) (add1 (rec (cdr l))) 0))))) #hash()) . #<set: (((Clo f ((λ (x) (f (λ (v) ((x x) v)))) (λ (y) (f (λ (u) ((y y) u))))) #hash())) #hash())>)
              ((Clo rec (λ (l) (if0 (pair? l) (add1 (rec (cdr l))) 0)) #hash((Y . Y_0))) . #<set: (((Clo v ((x x) v) #hash((f . f_0) (x . x_0)))) #hash()) (((Clo u ((y y) u) #hash((f . f_0) (y . y_0)))) #hash((ℓ . (Pair α_0 α_1)) (ℓ_0 . (● #<set:>)) (ℓ_1 . (● #<set:>)))) (((Clo u ((y y) u) #hash((f . f_0) (y . y_1)))) #hash((ℓ . (Pair α_0 α_1)) (ℓ_0 . (● #<set:>)) (ℓ_1 . (Pair α_2 α_3)) (ℓ_2 . (● #<set:>)) (ℓ_3 . (● #<set:>))))>)
              )
        (Clo y (f (λ (u) ((y y) u))) #hash((f . f_0)))
        ((Clo y (f (λ (u) ((y y) u))) #hash((f . f_0))))
        #hash((ℓ . (Pair α_0 α_1))
              (ℓ_0 . (● #<set:>))
              (ℓ_1 . (Pair α_2 α_3))
              (ℓ_2 . (● #<set:>))
              (ℓ_3 . (Pair α_4 α_5))
              (ℓ_4 . (● #<set:>))
              (ℓ_5 . (● #<set:>))
              ))
